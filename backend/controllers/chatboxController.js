import Product from "../models/Product.js";
import { askGemini } from "../configs/geminiai.js";

// B·∫£ng √°nh x·∫° t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh cho c√°c lo·∫°i tr√°i c√¢y v√† rau c·ªß
const vietnameseToEnglishMapping = {
    // Tr√°i c√¢y
    't√°o': 'apple',
    'chu·ªëi': 'banana',
    'cam': 'orange',
    'qu√Ωt': 'tangerine',
    'b∆∞·ªüi': 'pomelo',
    'xo√†i': 'mango',
    'd·ª©a': 'pineapple',
    'th∆°m': 'pineapple',
    'kh√≥m': 'pineapple',
    'd∆∞a h·∫•u': 'watermelon',
    'd∆∞a ƒë·ªè': 'watermelon',
    'd∆∞a l∆∞·ªõi': 'cantaloupe',
    'd∆∞a': 'melon',
    '·ªïi': 'guava',
    'nho': 'grape',
    'l√™': 'pear',
    'ƒë√†o': 'peach',
    'm·∫≠n': 'plum',
    'v·∫£i': 'lychee',
    'nh√£n': 'longan',
    'ch√¥m ch√¥m': 'rambutan',
    'mƒÉng c·ª•t': 'mangosteen',
    's·∫ßu ri√™ng': 'durian',
    'thanh long': 'dragon fruit',
    'kiwi': 'kiwi',
    'd√¢u t√¢y': 'strawberry',
    'd√¢u': 'strawberry',
    'd·ª´a': 'coconut',
    'chanh': 'lemon',
    'chanh d√¢y': 'passion fruit',
    'ƒëu ƒë·ªß': 'papaya',
    'b∆°': 'avocado',
    'sung': 'fig',
    'm√≠t': 'jackfruit',

    // Rau c·ªß
    'c·∫£i': 'spinach',
    'b·∫Øp c·∫£i': 'cabbage',
    'c·∫£i th·∫£o': 'napa cabbage',
    'c·∫£i xanh': 'mustard greens',
    'c·∫£i ng·ªçt': 'choy sum',
    'c·∫£i b√≥ x√¥i': 'spinach',
    'rau ch√¢n v·ªãt': 'spinach',
    'c·∫£i th√¨a': 'bok choy',
    'c√† r·ªët': 'carrot',
    'khoai t√¢y': 'potato',
    'khoai lang': 'sweet potato',
    'c·ªß c·∫£i': 'radish',
    'c·ªß c·∫£i tr·∫Øng': 'white radish',
    'c√† chua': 'tomato',
    'h√†nh t√¢y': 'onion',
    'h√†nh': 'onion',
    't·ªèi': 'garlic',
    'g·ª´ng': 'ginger',
    '·ªõt': 'chili',
    'ƒë·∫≠u': 'bean',
    'ƒë·∫≠u cove': 'green beans',
    'ƒë·∫≠u h√† lan': 'peas',
    'ƒë·∫≠u ph·ªông': 'peanut',
    'l·∫°c': 'peanut',
    'rau mu·ªëng': 'water spinach',
    'rau d·ªÅn': 'amaranth',
    'rau ng√≥t': 'katuk',
    'rau x√† l√°ch': 'lettuce',
    'b√¥ng c·∫£i': 'broccoli',
    'b√¥ng c·∫£i xanh': 'broccoli',
    's√∫p l∆°': 'cauliflower',
    's√∫p l∆° tr·∫Øng': 'cauliflower',
    's√∫p l∆° xanh': 'broccoli',
    'b√≠ ƒë·ªè': 'pumpkin',
    'b√≠ ng√¥': 'pumpkin',
    'b√≠ ƒëao': 'winter melon',
    'b√≠ xanh': 'winter melon',
    'm∆∞·ªõp': 'loofah',
    'm∆∞·ªõp ƒë·∫Øng': 'bitter melon',
    'kh·ªï qua': 'bitter melon',
    'mƒÉng t√¢y': 'asparagus',
    'n·∫•m': 'mushroom',
    '·ªõt chu√¥ng': 'bell pepper',
    'd∆∞a chu·ªôt': 'cucumber',
    'ƒë·∫≠u b·∫Øp': 'okra',

    //b√°nh
    'b√°nh m√¨': 'bread',
    'B√°nh m√¨ n√¢u': 'brown bread',
    'b√°nh m√¨ tr·∫Øng': 'whole bread',
    'socola': 'chocolate cake',
    'Butter Croissant': 'butter croissant',
    'B√°nh n∆∞·ªõng x·ªëp vani': 'vanilla muffins',

    //m√¨ t√¥m
    'm√¨ maggi': 'taggi noodles',
    'm√¨ ramen': 'Top tamen',
    'm√¨ oats': 'oats noodles',
    'm√¨ h·∫£o h·∫£o': 'yippee noodles',

    // Danh m·ª•c
    'tr√°i c√¢y': 'fruits',
    'rau c·ªß': 'vegetables',
    'hoa qu·∫£': 'fruits',
    'rau': 'vegetables',
    'c·ªß': 'root vegetables',
    'qu·∫£': 'fruits',
    'ng≈© c·ªëc': 'grains',
    'm√¨': 'instant',

    //n∆∞·ªõc u·ªëng 
    'n∆∞·ªõc l·ªçc': 'water',
    'n∆∞·ªõc su·ªëi': 'spring water',
    'n∆∞·ªõc d·ª´a': 'coconut water',
    'n∆∞·ªõc ng·ªçt': 'soft drink',
    'n∆∞·ªõc tr√°i c√¢y': 'fruit juice',
    'n∆∞·ªõc √©p': 'juice',
    'n∆∞·ªõc cam': 'orange juice',
    'n∆∞·ªõc chanh': 'lemonade',
    'n∆∞·ªõc chanh d√¢y': 'passion fruit juice',
    'n∆∞·ªõc √©p tr√°i c√¢y': 'fruit juice',
    'n∆∞·ªõc √©p rau c·ªß': 'vegetable juice',
    'n∆∞·ªõc √©p': 'juice',
    'n∆∞·ªõc tƒÉng l·ª±c': 'energy drink',
    'n∆∞·ªõc ng·ªçt c√≥ ga': 'carbonated drink',
    'n∆∞·ªõc pepsi': 'pepsi',
    'n∆∞·ªõc coca': 'coca cola',
    'n∆∞·ªõc fanta': 'fanta',
    'n∆∞·ªõc 7up': '7 up',
    'n∆∞·ªõc tr√†': 'tea',
    'n∆∞·ªõc tr√† xanh': 'green tea',
    'n∆∞·ªõc tr√† ƒëen': 'black tea',
    'n∆∞·ªõc tr√† s·ªØa': 'milk tea',
    'n∆∞·ªõc tr√† chanh': 'lemon tea',
};

// B·∫£ng √°nh x·∫° ng∆∞·ª£c t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
const englishToVietnameseMapping = {};
for (const [viKey, enValue] of Object.entries(vietnameseToEnglishMapping)) {
    if (!englishToVietnameseMapping[enValue]) {
        englishToVietnameseMapping[enValue] = [];
    }
    englishToVietnameseMapping[enValue].push(viKey);
}

// Danh s√°ch c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn th·ªùi ti·∫øt v√† c·∫£m x√∫c
const weatherAndEmotionToProduct = {
    'n√≥ng': ['n∆∞·ªõc l·ªçc', 'd∆∞a h·∫•u', 'chanh', 'd·ª´a', 'd∆∞a l∆∞·ªõi'],
    'kh√°t': ['n∆∞·ªõc l·ªçc', 'n∆∞·ªõc d·ª´a', 'chanh', 'cam'],
    'm·ªát': ['n∆∞·ªõc l·ªçc', 'chu·ªëi', 'cam', 't√°o'],
    'ƒë√≥i': ['b√°nh m√¨', 'chu·ªëi', 't√°o', 'xo√†i', 'm√¨'],
    'mu·ªën ƒÉn ng·ªçt': ['chu·ªëi', 'd∆∞a h·∫•u', 'd√¢u t√¢y', 'nho', 'xo√†i'],
    'ƒÉn ki√™ng': ['c·∫£i xanh', 'rau x√† l√°ch', 'c√† chua', 'd∆∞a chu·ªôt', 'b∆°'],
    'l·∫°nh': ['b√°nh m√¨', 'm√¨', 'khoai lang', 'b√≠ ƒë·ªè'],
    // Th√™m c·∫£m x√∫c/tr·∫°ng th√°i b·∫±ng ti·∫øng Anh
    'hot': ['water', 'watermelon', 'lemon', 'coconut'],
    'thirsty': ['water', 'coconut water', 'orange juice'],
    'tired': ['banana', 'orange', 'apple'],
    'hungry': ['bread', 'banana', 'apple', 'mango', 'noodles'],
    'sweet': ['banana', 'watermelon', 'strawberry', 'grape', 'mango'],
    'diet': ['spinach', 'lettuce', 'tomato', 'cucumber', 'avocado'],
    'cold': ['bread', 'noodles', 'sweet potato', 'pumpkin']
};

//get askChat : /api/ask/user
export const askChat = async (req, res) => {
    const { question } = req.body;

    console.log('üìù C√¢u h·ªèi nh·∫≠n ƒë∆∞·ª£c:', question);

    try {
        let keyword;
        let originalLanguage = detectLanguage(question);
        console.log(`üîé Ng√¥n ng·ªØ ph√°t hi·ªán: ${originalLanguage}`);
        
        try {
            // B∆∞·ªõc 1: G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini ƒë·ªÉ r√∫t tr√≠ch keyword
            const geminiPrompt = `Ng∆∞·ªùi d√πng n√≥i: "${question}". H√£y ph√¢n t√≠ch ng·ªØ c·∫£nh v√† c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng (nh∆∞ tr·ªùi n√≥ng, mu·ªën ƒÉn nh·∫π, kh√°t n∆∞·ªõc, ƒÉn ki√™ng...) ƒë·ªÉ suy lu·∫≠n ra s·∫£n ph·∫©m h·ªç ƒëang nh·∫Øc ƒë·∫øn. Tr·∫£ v·ªÅ ch√≠nh x√°c **t√™n lo·∫°i tr√°i c√¢y, rau c·ªß, b√°nh ho·∫∑c n∆∞·ªõc u·ªëng** m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒëang mu·ªën mua, b·∫±ng **ti·∫øng Vi·ªát** (v√≠ d·ª•: "n∆∞·ªõc l·ªçc", "chu·ªëi", "b√°nh y·∫øn m·∫°ch"). Kh√¥ng c·∫ßn gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ t·ª´ kh√≥a ti·∫øng Vi·ªát duy nh·∫•t.`;
            keyword = await askGemini(geminiPrompt);
            console.log(`ü§ñ Gemini ƒë√£ tr·∫£ l·ªùi:`, keyword);
        } catch (aiError) {
            console.error('‚ùå L·ªói Gemini API:', aiError);

            // Fallback ph∆∞∆°ng th·ª©c 1: Ph√¢n t√≠ch d·ª±a v√†o t·ª´ kh√≥a th·ªùi ti·∫øt/c·∫£m x√∫c
            keyword = extractProductFromWeatherEmotion(question);
            // N·∫øu kh√¥ng t√¨m th·∫•y, d√πng ph∆∞∆°ng th·ª©c 2
            if (!keyword) {
                keyword = extractKeywordFromQuestion(question);
            }
        }

        console.log(`üîç T·ª´ kh√≥a ƒë∆∞·ª£c hi·ªÉu l√†: "${keyword}"`);

        // Chu·∫©n b·ªã c√°c bi·∫øn th·ªÉ c·ªßa t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm
        const searchTerms = generateSearchTerms(keyword, originalLanguage);
        console.log('üîç C√°c t·ª´ kh√≥a t√¨m ki·∫øm:', searchTerms);

        // T·∫°o query cho MongoDB
        const orConditions = [];
        
        // Th√™m ƒëi·ªÅu ki·ªán t√¨m ki·∫øm cho m·ªói t·ª´ kh√≥a
        for (const term of searchTerms) {
            orConditions.push(
                { name: { $regex: term, $options: 'i' } },
                { category: { $regex: term, $options: 'i' } },
                { description: { $regex: term, $options: 'i' } }
            );
        }

        // B∆∞·ªõc 2: D√πng keyword ƒë·ªÉ t√¨m trong MongoDB
        const result = await Product.findOne({ $or: orConditions });

        if (result) {
            // ƒê·ªãnh d·∫°ng gi√° ti·ªÅn d·ª±a tr√™n ng√¥n ng·ªØ
            const priceFormat = originalLanguage === 'en' 
                ? `$${result.offerPrice.toLocaleString()}` 
                : `${result.offerPrice.toLocaleString()} VND`;
                
            res.json({
                answer: `üì¶ ${result.name}: ${result.description[0]} ‚Äì Gi√°: ${priceFormat}`,
            });
        } else {
            // Th·ª≠ t√¨m s·∫£n ph·∫©m v·ªõi category chung
            const categoryProducts = await Product.find({
                category: { $regex: getCategoryFromKeyword(keyword), $options: 'i' }
            }).limit(3);

            if (categoryProducts && categoryProducts.length > 0) {
                // Ch·ªçn m·ªôt s·∫£n ph·∫©m ng·∫´u nhi√™n t·ª´ c√πng danh m·ª•c
                const product = categoryProducts[Math.floor(Math.random() * categoryProducts.length)];
                
                // ƒê·ªãnh d·∫°ng gi√° ti·ªÅn d·ª±a tr√™n ng√¥n ng·ªØ
                const priceFormat = originalLanguage === 'en' 
                    ? `$${product.offerPrice.toLocaleString()}` 
                    : `${product.offerPrice.toLocaleString()} VND`;
                
                const notFoundMsg = originalLanguage === 'en'
                    ? `I couldn't find "${keyword}" but you might like`
                    : `T√¥i kh√¥ng t√¨m th·∫•y "${keyword}" nh∆∞ng c√≥ th·ªÉ b·∫°n s·∫Ω th√≠ch`;
                
                res.json({
                    answer: `‚ùì ${notFoundMsg}: ${product.name} ‚Äì Gi√°: ${priceFormat}`,
                });
            } else {
                const notFoundMsg = originalLanguage === 'en'
                    ? `Sorry, I couldn't find any product matching "${keyword}" in our database.`
                    : `Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi "${keyword}" trong c∆° s·ªü d·ªØ li·ªáu.`;
                
                res.json({
                    answer: `‚ùå ${notFoundMsg}`,
                });
            }
        }

    } catch (err) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω:', err);
        res.status(500).json({ answer: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.' });
    }
}

// Ph√°t hi·ªán ng√¥n ng·ªØ t·ª´ c√¢u h·ªèi (ƒë∆°n gi·∫£n)
function detectLanguage(text) {
    // C√°c t·ª´ ti·∫øng Vi·ªát ph·ªï bi·∫øn
    const vietnameseWords = ['t√¥i', 'b·∫°n', 'mu·ªën', 'c·∫ßn', 'mua', 'ƒÉn', 'u·ªëng', 'n√≥ng', 'l·∫°nh', 'ng·ªçt', 'chua', 'v√†', 'ho·∫∑c', 'kh√¥ng', 'c√≥', 'g√¨', 'ƒëang', 'cho'];
    
    // Ki·ªÉm tra xem c√≥ ch·ª©a d·∫•u ti·∫øng Vi·ªát kh√¥ng
    const hasVietnameseDiacritics = /[√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë]/i.test(text);
    
    if (hasVietnameseDiacritics) {
        return 'vi';
    }
    
    // N·∫øu kh√¥ng c√≥ d·∫•u, th·ª≠ ki·ªÉm tra t·ª´ ph·ªï bi·∫øn
    const lowercaseText = text.toLowerCase();
    for (const word of vietnameseWords) {
        if (lowercaseText.includes(word)) {
            return 'vi';
        }
    }
    
    return 'en'; // M·∫∑c ƒë·ªãnh l√† ti·∫øng Anh
}

// T·∫°o c√°c bi·∫øn th·ªÉ t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm
function generateSearchTerms(keyword, originalLanguage) {
    const terms = [keyword.toLowerCase().trim()];
    const lowercaseKeyword = keyword.toLowerCase().trim();
    
    // N·∫øu t·ª´ kh√≥a l√† ti·∫øng Vi·ªát, th√™m b·∫£n d·ªãch ti·∫øng Anh
    if (originalLanguage === 'vi' || vietnameseToEnglishMapping[lowercaseKeyword]) {
        const englishTerm = translateKeyword(lowercaseKeyword);
        if (englishTerm && !terms.includes(englishTerm)) {
            terms.push(englishTerm);
        }
    } 
    // N·∫øu t·ª´ kh√≥a l√† ti·∫øng Anh, th√™m b·∫£n d·ªãch ti·∫øng Vi·ªát
    else if (englishToVietnameseMapping[lowercaseKeyword]) {
        const viTerms = englishToVietnameseMapping[lowercaseKeyword];
        viTerms.forEach(term => {
            if (!terms.includes(term)) {
                terms.push(term);
            }
        });
    }
    
    // Th√™m c√°c t·ª´ ƒë·ªìng nghƒ©a ho·∫∑c li√™n quan
    const relatedTerms = getRelatedTerms(lowercaseKeyword);
    relatedTerms.forEach(term => {
        if (!terms.includes(term)) {
            terms.push(term);
        }
    });
    
    return terms;
}

// L·∫•y c√°c t·ª´ ƒë·ªìng nghƒ©a ho·∫∑c li√™n quan
function getRelatedTerms(keyword) {
    const relatedTerms = [];
    
    // T·ª´ ƒëi·ªÉn ƒë·ªìng nghƒ©a
    const synonyms = {
        'apple': ['t√°o', 't√°o t√¢y'],
        'banana': ['chu·ªëi', 'chu·ªëi ti√™u', 'chu·ªëi s·ª©'],
        'orange': ['cam', 'qu√Ωt'],
        'bread': ['b√°nh m√¨', 'b√°nh sandwich'],
        'water': ['n∆∞·ªõc l·ªçc', 'n∆∞·ªõc su·ªëi', 'n∆∞·ªõc u·ªëng', 'n∆∞·ªõc ng·ªçt'],
        'noodles': ['m√¨', 'm√¨ g√≥i', 'm√¨ ƒÉn li·ªÅn'],
        'vegetables': ['rau', 'rau c·ªß', 'rau xanh'],
        'fruits': ['tr√°i c√¢y', 'hoa qu·∫£', 'qu·∫£'],
    };
    
    // Th√™m ƒë·ªìng nghƒ©a n·∫øu c√≥
    if (synonyms[keyword]) {
        relatedTerms.push(...synonyms[keyword]);
    }
    
    // T√¨m t·ª´ kh√≥a ng∆∞·ª£c ƒë·ªÉ l·∫•y ƒë·ªìng nghƒ©a
    for (const [key, values] of Object.entries(synonyms)) {
        if (values.includes(keyword)) {
            relatedTerms.push(key);
            values.forEach(val => {
                if (val !== keyword) {
                    relatedTerms.push(val);
                }
            });
        }
    }
    
    return relatedTerms;
}

// Ph√¢n t√≠ch c·∫£m x√∫c/th·ªùi ti·∫øt ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m
function extractProductFromWeatherEmotion(question) {
    const lowercaseQuestion = question.toLowerCase();
    
    for (const [emotion, products] of Object.entries(weatherAndEmotionToProduct)) {
        if (lowercaseQuestion.includes(emotion)) {
            // Tr·∫£ v·ªÅ s·∫£n ph·∫©m ng·∫´u nhi√™n t·ª´ danh s√°ch g·ª£i √Ω
            return products[Math.floor(Math.random() * products.length)];
        }
    }
    
    return null;
}

// H√†m d·ª± ƒëo√°n danh m·ª•c t·ª´ t·ª´ kh√≥a
function getCategoryFromKeyword(keyword) {
    const lowercaseKeyword = keyword.toLowerCase();
    
    // Danh s√°ch c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn t·ª´ng danh m·ª•c
    const categoryKeywords = {
        'fruits': ['tr√°i c√¢y', 'qu·∫£', 't√°o', 'chu·ªëi', 'cam', 'xo√†i', 'd√¢u', 
                  'apple', 'banana', 'orange', 'mango', 'strawberry', 'fruit'],
        'vegetables': ['rau', 'c·ªß', 'c·∫£i', 'khoai', 'c√†', 'h√†nh', 't·ªèi', 
                      'vegetable', 'spinach', 'carrot', 'potato', 'onion', 'garlic'],
        'bakery': ['b√°nh', 'bread', 'cake', 'croissant', 'muffin', 'pastry', 'bakery'],
        'instant': ['m√¨', 'noodle', 'instant', 'ramen'],
        'cold drink': ['n∆∞·ªõc', 'n∆∞·ªõc ng·ªçt', 'n∆∞·ªõc l·ªçc', 'n∆∞·ªõc tr√°i c√¢y', 'n∆∞·ªõc √©p', 'pepsi', 'coca', 'spring water', 'soft drink', 'juice', 'energy drink', 'fanta', '7 up'],
    };
    
    for (const [category, keywords] of Object.entries(categoryKeywords)) {
        for (const word of keywords) {
            if (lowercaseKeyword.includes(word)) {
                return category;
            }
        }
    }
    
    return 'fruits'; // Danh m·ª•c m·∫∑c ƒë·ªãnh
}

// H√†m chuy·ªÉn ƒë·ªïi t·ª´ kh√≥a t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
function translateKeyword(vietnameseKeyword) {
    // T√¨m t·ª´ kh√≥a ch√≠nh x√°c trong b·∫£ng √°nh x·∫°
    if (vietnameseToEnglishMapping[vietnameseKeyword]) {
        return vietnameseToEnglishMapping[vietnameseKeyword];
    }
    
    // T√¨m t·ª´ kh√≥a c√≥ ch·ª©a trong c√¢u
    for (const [viKey, enValue] of Object.entries(vietnameseToEnglishMapping)) {
        if (vietnameseKeyword.includes(viKey)) {
            return enValue;
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ t·ª´ kh√≥a g·ªëc
    return vietnameseKeyword;
}

// H√†m fallback ƒë·ªÉ tr√≠ch xu·∫•t t·ª´ kh√≥a t·ª´ c√¢u h·ªèi khi API kh√¥ng ho·∫°t ƒë·ªông
function extractKeywordFromQuestion(question) {
    // Danh s√°ch m·ªôt s·ªë lo·∫°i tr√°i c√¢y v√† rau c·ªß ph·ªï bi·∫øn
    const commonFruits = Object.keys(vietnameseToEnglishMapping);
    // Danh s√°ch t·ª´ ti·∫øng Anh
    const commonEnglishTerms = Object.values(vietnameseToEnglishMapping);
    
    // Chuy·ªÉn c√¢u h·ªèi v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ so kh·ªõp
    const lowercaseQuestion = question.toLowerCase();
    
    // T√¨m t·ª´ ti·∫øng Vi·ªát trong danh s√°ch
    for (const fruit of commonFruits) {
        if (lowercaseQuestion.includes(fruit)) {
            return fruit;
        }
    }
    
    // T√¨m t·ª´ ti·∫øng Anh trong danh s√°ch
    for (const term of commonEnglishTerms) {
        if (lowercaseQuestion.includes(term)) {
            return term;
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a trong danh s√°ch, tr·∫£ v·ªÅ m·ªôt ph·∫ßn c·ªßa c√¢u h·ªèi
    const words = lowercaseQuestion.split(/\s+/);
    // Tr·∫£ v·ªÅ t·ª´ cu·ªëi c√πng n·∫øu c√≥ √≠t nh·∫•t 3 k√Ω t·ª±
    for (let i = words.length - 1; i >= 0; i--) {
        if (words[i].length >= 3 && !['g√¨', 'n√†y', 'khi', 'n√†o', 'bao', 'm·∫•y', 'nhi√™u', 'v√†', 'hay', 'sao', 'kh√¥ng', 'l√†m',
                                      'what', 'when', 'where', 'who', 'why', 'how', 'can', 'the', 'and', 'for', 'from'].includes(words[i])) {
            return words[i];
        }
    }
    
    // Fallback cu·ªëi c√πng
    return 'tr√°i c√¢y';
}