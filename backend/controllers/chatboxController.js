import Product from "../models/Product.js";
import { askChatGPT } from "../configs/openai.js";

// B·∫£ng √°nh x·∫° t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh cho c√°c lo·∫°i tr√°i c√¢y v√† rau c·ªß
const vietnameseToEnglishMapping = {
    // Tr√°i c√¢y
    't√°o': 'apple',
    'chu·ªëi': 'banana',
    'cam': 'orange',
    'qu√Ωt': 'tangerine',
    'b∆∞·ªüi': 'pomelo',
    'xo√†i': 'mango',
    'd·ª©a': 'pineapple',
    'th∆°m': 'pineapple',
    'kh√≥m': 'pineapple',
    'd∆∞a h·∫•u': 'watermelon',
    'd∆∞a ƒë·ªè': 'watermelon',
    'd∆∞a l∆∞·ªõi': 'cantaloupe',
    'd∆∞a': 'melon',
    '·ªïi': 'guava',
    'nho': 'grape',
    'l√™': 'pear',
    'ƒë√†o': 'peach',
    'm·∫≠n': 'plum',
    'v·∫£i': 'lychee',
    'nh√£n': 'longan',
    'ch√¥m ch√¥m': 'rambutan',
    'mƒÉng c·ª•t': 'mangosteen',
    's·∫ßu ri√™ng': 'durian',
    'thanh long': 'dragon fruit',
    'kiwi': 'kiwi',
    'd√¢u t√¢y': 'strawberry',
    'd√¢u': 'strawberry',
    'd·ª´a': 'coconut',
    'chanh': 'lemon',
    'chanh d√¢y': 'passion fruit',
    'ƒëu ƒë·ªß': 'papaya',
    'b∆°': 'avocado',
    'sung': 'fig',
    'm√≠t': 'jackfruit',
    
    // Rau c·ªß
    'c·∫£i': 'spinach',
    'b·∫Øp c·∫£i': 'cabbage',
    'c·∫£i th·∫£o': 'napa cabbage',
    'c·∫£i xanh': 'mustard greens',
    'c·∫£i ng·ªçt': 'choy sum',
    'c·∫£i b√≥ x√¥i': 'spinach',
    'rau ch√¢n v·ªãt': 'spinach',
    'c·∫£i th√¨a': 'bok choy',
    'c√† r·ªët': 'carrot',
    'khoai t√¢y': 'potato',
    'khoai lang': 'sweet potato',
    'c·ªß c·∫£i': 'radish',
    'c·ªß c·∫£i tr·∫Øng': 'white radish',
    'c√† chua': 'tomato',
    'h√†nh t√¢y': 'onion',
    'h√†nh': 'onion',
    't·ªèi': 'garlic',
    'g·ª´ng': 'ginger',
    '·ªõt': 'chili',
    'ƒë·∫≠u': 'bean',
    'ƒë·∫≠u cove': 'green beans',
    'ƒë·∫≠u h√† lan': 'peas',
    'ƒë·∫≠u ph·ªông': 'peanut',
    'l·∫°c': 'peanut',
    'rau mu·ªëng': 'water spinach',
    'rau d·ªÅn': 'amaranth',
    'rau ng√≥t': 'katuk',
    'rau x√† l√°ch': 'lettuce',
    'b√¥ng c·∫£i': 'broccoli',
    'b√¥ng c·∫£i xanh': 'broccoli',
    's√∫p l∆°': 'cauliflower',
    's√∫p l∆° tr·∫Øng': 'cauliflower',
    's√∫p l∆° xanh': 'broccoli',
    'b√≠ ƒë·ªè': 'pumpkin',
    'b√≠ ng√¥': 'pumpkin',
    'b√≠ ƒëao': 'winter melon',
    'b√≠ xanh': 'winter melon',
    'm∆∞·ªõp': 'loofah',
    'm∆∞·ªõp ƒë·∫Øng': 'bitter melon',
    'kh·ªï qua': 'bitter melon',
    'mƒÉng t√¢y': 'asparagus',
    'n·∫•m': 'mushroom',
    '·ªõt chu√¥ng': 'bell pepper',
    'd∆∞a chu·ªôt': 'cucumber',
    'ƒë·∫≠u b·∫Øp': 'okra',

    //b√°nh
    'b√°nh m√¨': 'bread',
    'B√°nh m√¨ n√¢u' : 'brown bread',
    'b√°nh m√¨ tr·∫Øng' : 'whole bread',
    'socola': 'chocolate cake',
    'Butter Croissant': 'butter croissant',
    'B√°nh n∆∞·ªõng x·ªëp vani': 'vanilla muffins',

    //m√¨ t√¥m
    'm√¨ maggi': 'taggi noodles',
    'm√¨ ramen': 'Top tamen',
    'm√¨ oats': 'oats noodles',
    'm√¨ h·∫£o h·∫£o': 'yippee noodles',
    
    // Danh m·ª•c
    'tr√°i c√¢y': 'fruits',
    'rau c·ªß': 'vegetables',
    'hoa qu·∫£': 'fruits',
    'rau': 'vegetables',
    'c·ªß': 'root vegetables',
    'qu·∫£': 'fruits',
    'ng≈© c·ªëc': 'grains',
    'm√¨': 'instant',
};

//get askChat : /api/ask/user
export const askChat = async (req, res) => {
    const { question } = req.body;

    try {
        let keyword;
        try {
            // B∆∞·ªõc 1: G·ª≠i c√¢u h·ªèi ƒë·∫øn GPT ƒë·ªÉ r√∫t tr√≠ch keyword
            const gptPrompt = `Ng∆∞·ªùi d√πng n√≥i: "${question}". H√£y ph√¢n t√≠ch ng·ªØ c·∫£nh v√† c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng (nh∆∞ tr·ªùi n√≥ng, mu·ªën ƒÉn nh·∫π, kh√°t n∆∞·ªõc, ƒÉn ki√™ng...) ƒë·ªÉ suy lu·∫≠n ra s·∫£n ph·∫©m h·ªç ƒëang nh·∫Øc ƒë·∫øn. Tr·∫£ v·ªÅ ch√≠nh x√°c **t√™n lo·∫°i tr√°i c√¢y, rau c·ªß, b√°nh ho·∫∑c n∆∞·ªõc u·ªëng** m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒëang mu·ªën mua, b·∫±ng **ti·∫øng Vi·ªát** (v√≠ d·ª•: "n∆∞·ªõc l·ªçc", "chu·ªëi", "b√°nh y·∫øn m·∫°ch"). Kh√¥ng c·∫ßn gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ t·ª´ kh√≥a ti·∫øng Vi·ªát duy nh·∫•t.`;

            keyword = await askChatGPT(gptPrompt);
        } catch (aiError) {
            console.error('‚ùå L·ªói AI API:', aiError);
            // Fallback: Ph√¢n t√≠ch ƒë∆°n gi·∫£n t·ª´ c√¢u h·ªèi
            keyword = extractKeywordFromQuestion(question);
        }

        console.log('üîç T·ª´ kh√≥a ti·∫øng Vi·ªát ƒë∆∞·ª£c hi·ªÉu l√†:', keyword);
        
        // Chuy·ªÉn ƒë·ªïi t·ª´ kh√≥a t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
        const englishKeyword = translateKeyword(keyword.toLowerCase());
        console.log('üîç T·ª´ kh√≥a ti·∫øng Anh t∆∞∆°ng ·ª©ng:', englishKeyword);

        // B∆∞·ªõc 2: D√πng keyword ƒë·ªÉ t√¨m trong MongoDB
        const result = await Product.findOne({ 
            $or: [
                { name: { $regex: englishKeyword, $options: 'i' } },
                { category: { $regex: englishKeyword, $options: 'i' } },
                {description: { $regex: englishKeyword, $options: 'i' } }
            ] 
        });

        if (result) {
            res.json({
                answer: `üì¶ ${result.name}: ${result.description[0]} ‚Äì Gi√°: ${result.offerPrice.toLocaleString()} $.`,
            });
        } else {
            res.json({
                answer: `‚ùå Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi "${keyword}" trong c∆° s·ªü d·ªØ li·ªáu.`,
            });
        }

    } catch (err) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω:', err);
        res.status(500).json({ answer: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi.' });
    }
}

// H√†m chuy·ªÉn ƒë·ªïi t·ª´ kh√≥a t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
function translateKeyword(vietnameseKeyword) {
    // T√¨m t·ª´ kh√≥a ch√≠nh x√°c trong b·∫£ng √°nh x·∫°
    if (vietnameseToEnglishMapping[vietnameseKeyword]) {
        return vietnameseToEnglishMapping[vietnameseKeyword];
    }
    
    // T√¨m t·ª´ kh√≥a c√≥ ch·ª©a trong c√¢u
    for (const [viKey, enValue] of Object.entries(vietnameseToEnglishMapping)) {
        if (vietnameseKeyword.includes(viKey)) {
            return enValue;
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ t·ª´ kh√≥a g·ªëc
    return vietnameseKeyword;
}

// H√†m fallback ƒë·ªÉ tr√≠ch xu·∫•t t·ª´ kh√≥a t·ª´ c√¢u h·ªèi khi API kh√¥ng ho·∫°t ƒë·ªông
function extractKeywordFromQuestion(question) {
    // Danh s√°ch m·ªôt s·ªë lo·∫°i tr√°i c√¢y v√† rau c·ªß ph·ªï bi·∫øn
    const commonFruits = Object.keys(vietnameseToEnglishMapping);
    
    // Chuy·ªÉn c√¢u h·ªèi v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ so kh·ªõp
    const lowercaseQuestion = question.toLowerCase();
    
    // T√¨m t·ª´ trong danh s√°ch
    for (const fruit of commonFruits) {
        if (lowercaseQuestion.includes(fruit)) {
            return fruit;
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a trong danh s√°ch, tr·∫£ v·ªÅ m·ªôt ph·∫ßn c·ªßa c√¢u h·ªèi
    const words = lowercaseQuestion.split(/\s+/);
    // Tr·∫£ v·ªÅ t·ª´ cu·ªëi c√πng n·∫øu c√≥ √≠t nh·∫•t 3 k√Ω t·ª±
    for (let i = words.length - 1; i >= 0; i--) {
        if (words[i].length >= 3 && !['g√¨', 'n√†y', 'khi', 'n√†o', 'bao', 'm·∫•y', 'nhi√™u', 'v√†', 'hay', 'sao', 'kh√¥ng', 'l√†m'].includes(words[i])) {
            return words[i];
        }
    }
    
    // Fallback cu·ªëi c√πng
    return 'tr√°i c√¢y';
}