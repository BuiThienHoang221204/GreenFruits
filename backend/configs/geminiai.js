import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from 'dotenv';

// ƒê·∫£m b·∫£o c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c t·∫£i
dotenv.config();

// L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const apiKey = process.env.GEMINI_API_KEY;

// Ki·ªÉm tra API key c√≥ t·ªìn t·∫°i kh√¥ng
if (!apiKey) {
  console.error("‚ùå API key kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p! Vui l√≤ng ƒë·∫∑t GEMINI_API_KEY trong file .env");
}

// Kh·ªüi t·∫°o Google Generative AI v·ªõi API key
const genAI = new GoogleGenerativeAI(apiKey);

// T√™n c√°c model Gemini c√≥ th·ªÉ s·ª≠ d·ª•ng
export const AVAILABLE_MODELS = {
  DEFAULT: "gemini-1.5-flash", // Thay th·∫ø gemini-pro b·∫±ng model m·ªõi nh·∫•t
  PRO: "gemini-1.5-pro",
  FLASH: "gemini-1.5-flash",
  LEGACY_PRO: "gemini-pro",
  LEGACY_PRO_VISION: "gemini-pro-vision",
  LEGACY_FLASH: "gemini-flash"
};

/**
 * H√†m ƒë·ªÉ l·∫•y danh s√°ch c√°c model c√≥ s·∫µn
 * @returns {Promise<Array>} - Danh s√°ch c√°c model c√≥ s·∫µn
 */
export async function listAvailableModels() {
  try {
    // L·∫•y danh s√°ch model
    const modelList = await genAI.listModels();
    return modelList;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch model:", error);
    return Object.values(AVAILABLE_MODELS);
  }
}

/**
 * H√†m ƒë·ªÉ g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API
 * @param {string} prompt - C√¢u h·ªèi ho·∫∑c y√™u c·∫ßu g·ª≠i ƒë·∫øn Gemini
 * @param {string} modelName - T√™n model (m·∫∑c ƒë·ªãnh l√† gemini-1.5-flash)
 * @returns {Promise<string>} - K·∫øt qu·∫£ ph·∫£n h·ªìi t·ª´ Gemini
 */
export async function askGemini(prompt, modelName = AVAILABLE_MODELS.DEFAULT) {
  try {
    console.log(`üöÄ ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn model ${modelName}...`);
    
    // L·∫•y model
    const model = genAI.getGenerativeModel({ model: modelName });

    // Thi·∫øt l·∫≠p c√°c tham s·ªë t·∫°o sinh
    const generationConfig = {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1000,
    };

    // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig,
    });

    // L·∫•y v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi
    const response = result.response;
    return response.text();
  } catch (error) {
    console.error("‚ùå L·ªói khi k·∫øt n·ªëi v·ªõi Gemini API:", error);
    
    // Th·ª≠ v·ªõi model kh√°c n·∫øu model kh√¥ng t·ªìn t·∫°i
    if (error.status === 404 && modelName !== AVAILABLE_MODELS.LEGACY_PRO) {
      console.log(`‚ö†Ô∏è Model ${modelName} kh√¥ng t·ªìn t·∫°i, th·ª≠ v·ªõi model ${AVAILABLE_MODELS.LEGACY_PRO}...`);
      return askGemini(prompt, AVAILABLE_MODELS.LEGACY_PRO);
    }
    
    // N√©m l·∫°i l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü l·ªõp g·ªçi
    throw new Error(`L·ªói khi g·ªçi Gemini API: ${error.message}`);
  }
}
export default {
  askGemini,
  listAvailableModels,
  AVAILABLE_MODELS
};
